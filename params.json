{"name":"C-LIFO","tagline":"A Last In First Out Linked List implementation in C.","body":"Abstract\r\n======\r\n\r\nA Last In First Out Linked List implementation in C.\r\n\r\nI used this buffer for measuring runtimes in nested functions (see [example](https://github.com/vdevos/C-LIFO/blob/master/main.c)) for logging.\r\n\r\nIt offers basic linked list functionality (see [lifo.h](https://github.com/vdevos/C-LIFO/blob/master/lifo.h)) so you can easily adjust the code for other purposes.\r\n\r\n## Usage\r\n\r\nIn main.c the FIFO is used for calculating (nested) process runtimes in microseconds. The main idea is that you keep \r\ntrack of your process' `start time` and `push` this onto the buffer when your function ends you can `pop` it off again \r\nand calculate the difference: `current-time` - `start-time`\r\n\r\nThe good thing is you don't have to keep track of timestamps withing each function itself and that it also \r\nworks for nested functions (as long as you push and pop consequently!)\r\n\r\n__TIP__ You can adjust the `struct item` in `lifo.h` for other data types.\r\n\r\n    struct item\r\n    {\r\n        unsigned long long timestamp;\r\n        struct item* next;\r\n    }\r\n\r\n## Compiling \r\n\r\n### Makefile    \r\n    \r\n    make all\r\n    \r\n### Manual\r\n    \r\n    gcc -g -Wall -o lifo.o -c lifo.c\r\n    gcc -g -Wall -o lifo main.c lifo.o  \r\n    \r\n## Example\r\n\r\n### Basic\r\n    #include \"lifo.h\"\r\n    \r\n    int main(int argc, char** argv)\r\n    {\r\n        lifo_init();\r\n    \r\n        int i;\r\n        for(i = 0; i < 10; i++) \r\n        {            \r\n            push(i);\r\n            pop();\r\n        }\r\n    \r\n        lifo_free();\r\n        \r\n        return 0;\r\n    }\r\n\r\n### Advanced\r\n\r\nSee [main.c](https://github.com/vdevos/C-LIFO/blob/master/main.c).\r\n\r\nThis should give a impression of the way I used it to measure function runtimes.\r\n\r\n\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}